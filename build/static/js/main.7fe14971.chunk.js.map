{"version":3,"sources":["components/AccessibleNavigationAnnouncer.js","App.js","serviceWorker.js","index.js","components/Typography/PageTitle.js","context/SidebarContext.js","components/Chart/ChartCard.js","components/ThemedSuspense.js","pages/Payouts.js"],"names":["AccessibleNavigationAnnouncer","useState","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","className","role","aria-live","aria-atomic","Layout","lazy","App","path","component","from","to","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","fallback","ThemedSuspense","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","PageTitle","children","SidebarContext","React","createContext","SidebarProvider","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","Chart","title","PayoutDetails","searchParams","URLSearchParams","search","seasons","setSeasons","users","setUsers","selectedSeason","setSelectedSeason","selectedUser","setSelectedUser","pageTable","setPageTable","dataTable","setDataTable","chartData","setChartData","sortBy","setSortBy","sortDirection","setSortDirection","totalResults","setTotalResults","a","ok","Error","json","data","fetchSeasons","fetchUsers","url","usernames","Set","map","payout","name","poolTypes","pool_type","poolTypeColors","userPayouts","forEach","sort","poolType","totalPayoutForUserAndType","filter","reduce","sum","amount","push","b","totalPayoutA","datasets","type","label","username","backgroundColor","stack","labels","fetchPayouts","length","fetchPayoutDetails","sortedData","valA","valB","startIndex","endIndex","Math","min","paginatedData","style","marginBottom","onChange","e","target","season","key","options","responsive","maintainAspectRatio","tooltips","callbacks","tooltipItem","datasetIndex","index","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","scales","xAxes","stacked","yAxes","ticks","beginAtZero","userCallback","values","getElementAtEvent","event","chartElements","clickedIndex","clickedUsername","handleBarClick","user","onClick","icon","arrowDown","i","pool","week","resultsPerPage","p","currentPage"],"mappings":"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","file":"static/js/main.7fe14971.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { lazy } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\nimport PayoutDetails from './pages/Payouts'\n\nconst Layout = lazy(() => import('./containers/Layout'))\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <Route path=\"/\" component={Layout} />\n          <Redirect from=\"\" to=\"/app/dashboard\" />\n          <Redirect from=\"/\" to=\"/app/dashboard\" />\n          {/* If you have an index page, you can remothis Redirect */}\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import React from 'react'\n\nfunction Chart({ children, title }) {\n  return (\n    <div className=\"min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\">\n      <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\n      {children}\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport PageTitle from '../components/Typography/PageTitle';\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Select,\n  Label,\n  Pagination,\n} from '@windmill/react-ui';\nimport { Icon } from '@iconify/react';\nimport arrowDown from '@iconify/icons-heroicons-solid/arrow-down';\nimport { Bar } from 'react-chartjs-2';\nimport ChartCard from '../components/Chart/ChartCard'\n\nfunction PayoutDetails() {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const [seasons, setSeasons] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedSeason, setSelectedSeason] = useState(searchParams.get('season'));\n  const [selectedUser, setSelectedUser] = useState(searchParams.get('username'));\n\n  const [pageTable, setPageTable] = useState(1);\n  const [dataTable, setDataTable] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  const [sortBy, setSortBy] = useState('amount');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [totalResults, setTotalResults] = useState(0);\n  const resultsPerPage = 10;\n\n  function onPageChangeTable(p) {\n    setPageTable(p);\n  }\n\n  useEffect(() => {\n    async function fetchSeasons() {\n      try {\n        const response = await fetch(`/api/v1/leagues/seasons`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setSeasons(data);\n      } catch (error) {\n        console.error('Error fetching seasons:', error);\n      }\n    }\n\n    fetchSeasons();\n  }, []);\n\n  useEffect(() => {\n    async function fetchUsers() {\n      try {\n        const response = await fetch(`/api/v1/users`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error('Error fetching seasons:', error);\n      }\n    }\n\n    fetchUsers();\n  }, []);\n\n\n  useEffect(() => {\n    async function fetchPayouts() {\n      try {\n        let url = '/api/v1/payouts/';\n        if (selectedSeason) {\n          url = `/api/v1/payouts/${selectedSeason}`;\n        }\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n\n        const usernames = [...new Set(data.map((payout) => payout.name))];\n        const poolTypes = [...new Set(data.map((payout) => payout.pool_type))];\n        const poolTypeColors = {\n          'main': '#7e3af2',\n          'side': '#0694a2',\n        };\n\n        // Initialize an empty object to hold aggregated payouts for each user\n        const userPayouts = {};\n\n        // Loop through each user and pool type to aggregate payouts\n        usernames.forEach(name => {\n          // Initialize an empty array to hofld payouts for the current user\n          userPayouts[name] = [];\n\n          // Loop through each pool type to aggregate payouts for the current user\n          poolTypes.sort();\n          poolTypes.forEach(poolType => {\n            // Filter payouts for the current user and pool type\n            const payoutsForUserAndType = data.filter(payout => payout.name === name && payout.pool_type === poolType);\n            // Sum up the payouts for the current user and pool type\n            const totalPayoutForUserAndType = payoutsForUserAndType.reduce((sum, payout) => sum + payout.amount, 0);\n            // Push the total payout for the current user and pool type to the array\n            userPayouts[name].push(totalPayoutForUserAndType);\n          });\n        });\n\n        // Sort the usernames based on total payout amount\n        usernames.sort((a, b) => {\n          const totalPayoutA = userPayouts[a].reduce((sum, amount) => sum + amount, 0);\n          const totalPayoutB = userPayouts[b].reduce((sum, amount) => sum + amount, 0);\n          return totalPayoutB - totalPayoutA;\n        });\n\n        // Create datasets for each pool type\n        const datasets = poolTypes.map((type) => {\n          return {\n            label: type,\n            data: usernames.map((username) => userPayouts[username][poolTypes.indexOf(type)]),\n            backgroundColor: poolTypeColors[type],\n            stack: 'stack',\n          };\n        });\n\n        const chartData = {\n          labels: usernames,\n          datasets,\n        };\n\n        setChartData(chartData);\n      } catch (error) {\n        console.error('Error fetching payouts:', error);\n      }\n    }\n    fetchPayouts().catch(console.error); // Log any errors thrown\n  }, [selectedSeason]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          let value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n          // Format the value as currency with $#,###.##\n          return value.toLocaleString('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n          });\n        }\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n        }\n      ],\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            userCallback: function (value, index, values) {\n              return value.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0 });\n            }\n          }\n        }\n      ],\n    },\n  };\n\n  const handleBarClick = (event, chartElements) => {\n    if (chartElements.length > 0) {\n      const clickedIndex = chartElements[0].index;\n      const clickedUsername = chartData.labels[clickedIndex];\n      setSelectedUser(clickedUsername); // Update selectedUser state\n    }\n  };\n\n  // Function to handle dropdown change event\n  const handleUserDropdownChange = (e) => {\n    setSelectedUser(e.target.value); // Update selectedUser state\n  };\n\n  useEffect(() => {\n    async function fetchPayoutDetails() {\n      try {\n        let url = '/api/v1/payoutdetails';\n\n        if (selectedSeason && selectedUser) {\n          url += `?season=${selectedSeason}&username=${selectedUser}`;\n        } else if (selectedSeason) {\n          url += `?season=${selectedSeason}`;\n        } else if (selectedUser) {\n          url += `?username=${selectedUser}`;\n        }\n\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        setDataTable(data);\n        setTotalResults(data.length);\n        setPageTable(1);\n      } catch (error) {\n        console.error('Error fetching payouts:', error);\n      }\n    }\n\n    fetchPayoutDetails();\n  }, [selectedSeason, selectedUser]);\n\n\n\n  const sortedData = [...dataTable];\n  if (sortBy) {\n    sortedData.sort((a, b) => {\n      const valA = a[sortBy];\n      const valB = b[sortBy];\n      if (valA < valB) return sortDirection === 'asc' ? -1 : 1;\n      if (valA > valB) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }\n\n  const startIndex = (pageTable - 1) * resultsPerPage;\n  const endIndex = Math.min(startIndex + resultsPerPage, totalResults);\n  const paginatedData = sortedData.slice(startIndex, endIndex);\n\n  function formatAmount(amount) {\n    // Format the amount as currency with $#,###.##\n    return amount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  }\n\n  return (\n    <>\n      <PageTitle>Payouts</PageTitle>\n\n      {/* Dropdown to select season */}\n      <div style={{ marginBottom: '20px' }}>\n        <Label>\n          <strong>Season</strong>\n          <Select\n            className=\"mb-4\"\n            value={selectedSeason}\n            onChange={(e) => setSelectedSeason(e.target.value)}\n          >\n            <option value=\"\">All-Time</option>\n            {seasons.map((season) => (\n              <option key={season} value={season}>\n                {season}\n              </option>\n            ))}\n          </Select>\n        </Label>\n      </div>\n\n      <div style={{ marginBottom: '20px' }}>\n        <ChartCard title=\"Payouts\">\n          <Bar data={chartData}\n            options={chartOptions}\n            getElementAtEvent={(event, chartElements) => handleBarClick(event, chartElements)}\n          />\n        </ChartCard>\n      </div>\n      {/* Dropdown to select user */}\n      <div style={{ marginBottom: '20px' }}>\n        <Label>\n          <strong>User</strong>\n          <Select\n            className=\"mb-4\"\n            value={selectedUser}\n            onChange={handleUserDropdownChange} // Call handleUserDropdownChange on change\n          >\n            <option value=\"\">All Users</option>\n            {users.map((user) => (\n              <option key={user.username} value={user.username}>\n                {user.name}\n              </option>\n            ))}\n          </Select>\n        </Label>\n      </div>\n\n\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSortBy('username');\n                  setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                }}\n              >\n                <div className=\"flex items-center\">\n                  User\n                  {sortBy === 'username' && (\n                    <Icon\n                      className={`ml-1 transform ${sortDirection === 'asc' ? 'rotate-180' : ''}`}\n                      icon={arrowDown}\n                    />\n                  )}\n                </div>\n              </TableCell>\n              <TableCell\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSortBy('pool');\n                  setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                }}\n              >\n                <div className=\"flex items-center\">\n                  Pool\n                  {sortBy === 'pool' && (\n                    <Icon\n                      className={`ml-1 transform ${sortDirection === 'asc' ? 'rotate-180' : ''}`}\n                      icon={arrowDown}\n                    />\n                  )}\n                </div>\n              </TableCell>\n              <TableCell\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSortBy('season');\n                  setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                }}\n              >\n                <div className=\"flex items-center\">\n                  Season\n                  {sortBy === 'season' && (\n                    <Icon\n                      className={`ml-1 transform ${sortDirection === 'asc' ? 'rotate-180' : ''}`}\n                      icon={arrowDown}\n                    />\n                  )}\n                </div>\n              </TableCell>\n              <TableCell\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSortBy('week');\n                  setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                }}\n              >\n                <div className=\"flex items-center\">\n                  Week\n                  {sortBy === 'week' && (\n                    <Icon\n                      className={`ml-1 transform ${sortDirection === 'asc' ? 'rotate-180' : ''}`}\n                      icon={arrowDown}\n                    />\n                  )}\n                </div>\n              </TableCell>\n              <TableCell\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSortBy('amount');\n                  setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                }}\n              >\n                <div className=\"flex items-center\">\n                  Amount\n                  {sortBy === 'amount' && (\n                    <Icon\n                      className={`ml-1 transform ${sortDirection === 'asc' ? 'rotate-180' : ''}`}\n                      icon={arrowDown}\n                    />\n                  )}\n                </div>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.map((payout, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{payout.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{payout.pool}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{payout.season}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{payout.week}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{formatAmount(payout.amount)}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {/* Pagination component */}\n        <TableFooter>\n          {totalResults > resultsPerPage && (\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              onChange={onPageChangeTable}\n              currentPage={pageTable}\n              label=\"Table navigation\"\n            />\n          )}\n        </TableFooter>\n\n      </TableContainer>\n    </>\n  );\n}\n\nexport default PayoutDetails;\n"],"sourceRoot":""}