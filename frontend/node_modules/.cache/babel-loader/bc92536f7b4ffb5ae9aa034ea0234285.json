{"ast":null,"code":"import _slicedToArray from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import InfoCard from'../components/Cards/LeaderboardCard';import ChartCard from'../components/Chart/ChartCard';import{Doughnut,Line}from'react-chartjs-2';import ChartLegend from'../components/Chart/ChartLegend';import PageTitle from'../components/Typography/PageTitle';import{ChatIcon,CartIcon,MoneyIcon,PeopleIcon}from'../icons';import RoundIcon from'../components/RoundIcon';import response from'../utils/demo/tableData';import{TableBody,TableContainer,Table,TableHeader,TableCell,TableRow,TableFooter,Avatar,Badge,Pagination}from'@windmill/react-ui';import{doughnutOptions,lineOptions,doughnutLegends,lineLegends}from'../utils/demo/chartsData';function Dashboard(){var _useState=useState(1),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];// pagination setup\nvar resultsPerPage=10;var totalResults=response.length;// pagination change control\nfunction onPageChange(p){setPage(p);}// on page change, load new sliced data\n// here you would make another server request for new data\nuseEffect(function(){setData(response.slice((page-1)*resultsPerPage,page*resultsPerPage));},[page]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(PageTitle,null,\"Dashboard\"),/*#__PURE__*/React.createElement(TableContainer,null,/*#__PURE__*/React.createElement(Table,null,/*#__PURE__*/React.createElement(TableHeader,null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(TableCell,null,\"Client\"),/*#__PURE__*/React.createElement(TableCell,null,\"Amount\"),/*#__PURE__*/React.createElement(TableCell,null,\"Status\"),/*#__PURE__*/React.createElement(TableCell,null,\"Date\"))),/*#__PURE__*/React.createElement(TableBody,null,data.map(function(user,i){return/*#__PURE__*/React.createElement(TableRow,{key:i},/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"div\",{className:\"flex items-center text-sm\"},/*#__PURE__*/React.createElement(Avatar,{className:\"hidden mr-3 md:block\",src:user.avatar,alt:\"User image\"}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{className:\"font-semibold\"},user.name),/*#__PURE__*/React.createElement(\"p\",{className:\"text-xs text-gray-600 dark:text-gray-400\"},user.job)))),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"span\",{className:\"text-sm\"},\"$ \",user.amount)),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(Badge,{type:user.status},user.status)),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"span\",{className:\"text-sm\"},new Date(user.date).toLocaleDateString())));}))),/*#__PURE__*/React.createElement(TableFooter,null,/*#__PURE__*/React.createElement(Pagination,{totalResults:totalResults,resultsPerPage:resultsPerPage,label:\"Table navigation\",onChange:onPageChange}))),/*#__PURE__*/React.createElement(PageTitle,null,\"Charts\"),/*#__PURE__*/React.createElement(\"div\",{className:\"grid gap-6 mb-8 md:grid-cols-2\"},/*#__PURE__*/React.createElement(ChartCard,{title:\"Revenue\"},/*#__PURE__*/React.createElement(Doughnut,doughnutOptions),/*#__PURE__*/React.createElement(ChartLegend,{legends:doughnutLegends})),/*#__PURE__*/React.createElement(ChartCard,{title:\"Traffic\"},/*#__PURE__*/React.createElement(Line,lineOptions),/*#__PURE__*/React.createElement(ChartLegend,{legends:lineLegends}))));}export default Dashboard;","map":{"version":3,"sources":["/Users/ryan.gillies/Documents/side_judge/src/pages/Dashboard.js"],"names":["React","useState","useEffect","InfoCard","ChartCard","Doughnut","Line","ChartLegend","PageTitle","ChatIcon","CartIcon","MoneyIcon","PeopleIcon","RoundIcon","response","TableBody","TableContainer","Table","TableHeader","TableCell","TableRow","TableFooter","Avatar","Badge","Pagination","doughnutOptions","lineOptions","doughnutLegends","lineLegends","Dashboard","page","setPage","data","setData","resultsPerPage","totalResults","length","onPageChange","p","slice","map","user","i","avatar","name","job","amount","status","Date","date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport InfoCard from '../components/Cards/LeaderboardCard'\nimport ChartCard from '../components/Chart/ChartCard'\nimport { Doughnut, Line } from 'react-chartjs-2'\nimport ChartLegend from '../components/Chart/ChartLegend'\nimport PageTitle from '../components/Typography/PageTitle'\nimport { ChatIcon, CartIcon, MoneyIcon, PeopleIcon } from '../icons'\nimport RoundIcon from '../components/RoundIcon'\nimport response from '../utils/demo/tableData'\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from '@windmill/react-ui'\n\nimport {\n  doughnutOptions,\n  lineOptions,\n  doughnutLegends,\n  lineLegends,\n} from '../utils/demo/chartsData'\n\nfunction Dashboard() {\n  const [page, setPage] = useState(1)\n  const [data, setData] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = response.length\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p)\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage))\n  }, [page])\n\n  return (\n    <>\n      <PageTitle>Dashboard</PageTitle>\n\n      {/* <!-- Cards -->\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"Total clients\" value=\"6389\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Account balance\" value=\"$ 46,760.89\">\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-green-500 dark:text-green-100\"\n            bgColorClass=\"bg-green-100 dark:bg-green-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"New sales\" value=\"376\">\n          <RoundIcon\n            icon={CartIcon}\n            iconColorClass=\"text-blue-500 dark:text-blue-100\"\n            bgColorClass=\"bg-blue-100 dark:bg-blue-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Pending contacts\" value=\"35\">\n          <RoundIcon\n            icon={ChatIcon}\n            iconColorClass=\"text-teal-500 dark:text-teal-100\"\n            bgColorClass=\"bg-teal-100 dark:bg-teal-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n      </div> */}\n\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Client</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {data.map((user, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <Avatar className=\"hidden mr-3 md:block\" src={user.avatar} alt=\"User image\" />\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{user.job}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">$ {user.amount}</span>\n                </TableCell>\n                <TableCell>\n                  <Badge type={user.status}>{user.status}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{new Date(user.date).toLocaleDateString()}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter>\n      </TableContainer>\n\n      <PageTitle>Charts</PageTitle>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Revenue\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Traffic\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n      </div>\n    </>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}