{"ast":null,"code":"import _defineProperty from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import PageTitle from'../components/Typography/PageTitle';import SectionTitle from'../components/Typography/SectionTitle';import LeaderboardCard from'../components/Cards/LeaderboardCard';import selectedSeason from'./Payouts';function Leaderboards(){var leagueId='978439391255322624';var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pools=_useState2[0],setPools=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),selectedCard=_useState4[0],setSelectedCard=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),leaderboards=_useState6[0],setLeaderboards=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),loading=_useState8[0],setLoading=_useState8[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch('/api/v1/pools');case 3:response=_context.sent;if(response.ok){_context.next=6;break;}throw new Error('Network response was not ok');case 6:_context.next=8;return response.json();case 8:data=_context.sent;setPools(data.sort(function(a,b){return a.label.localeCompare(b.label);}));setLoading(false);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);console.error('Error fetching pools:',_context.t0);case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return _fetchData.apply(this,arguments);}fetchData();},[]);useEffect(function(){pools.filter(function(pool){return pool.pool_subtype==='season_high'||pool.pool_subtype==='season_cumulative';}).forEach(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pool){var response,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch(\"/api/v1/pools/leaderboard?league_id=\".concat(leagueId,\"&pool_id=\").concat(pool.pool_id));case 3:response=_context2.sent;if(response.ok){_context2.next=7;break;}console.error(\"Error fetching leaderboard for pool \".concat(pool.pool_id,\": \").concat(response.statusText));return _context2.abrupt(\"return\");case 7:_context2.next=9;return response.json();case 9:data=_context2.sent;setLeaderboards(function(prevLeaderboards){return _objectSpread(_objectSpread({},prevLeaderboards),{},_defineProperty({},pool.pool_id,data));});_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);console.error('Error fetching leaderboards:',_context2.t0);case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return function(_x){return _ref.apply(this,arguments);};}());},[leagueId,pools]);// const handleCardClick = (id) => {\n//   setSelectedCard(id === selectedCard ? null : id); // Toggle selection\n// };\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(PageTitle,null,\"Leaderboards\"),/*#__PURE__*/React.createElement(SectionTitle,null,\"Season Highs\"),/*#__PURE__*/React.createElement(\"div\",{className:\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\"},pools.filter(function(pool){return pool.pool_subtype==='season_high';}).map(function(pool){var _leaderboards$pool$po;return/*#__PURE__*/React.createElement(LeaderboardCard,{key:pool.pool_id,title:pool.label,lines:((_leaderboards$pool$po=leaderboards[pool.pool_id])===null||_leaderboards$pool$po===void 0?void 0:_leaderboards$pool$po.map(function(entry){return{user:entry.username,week:entry.week,opponent:entry.opponent,player:entry.player_name,position:entry.position,score:entry.score?entry.score.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}):undefined};}))||[],selected:selectedCard===pool.pool_id// onClick={() => handleCardClick(pool.pool_id)}\n});})),/*#__PURE__*/React.createElement(SectionTitle,null,\"Season Cumulatives\"),/*#__PURE__*/React.createElement(\"div\",{className:\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\"},pools.filter(function(pool){return pool.pool_subtype==='season_cumulative';}).map(function(pool){var _leaderboards$pool$po2;return/*#__PURE__*/React.createElement(LeaderboardCard,{key:pool.pool_id,title:pool.label,lines:((_leaderboards$pool$po2=leaderboards[pool.pool_id])===null||_leaderboards$pool$po2===void 0?void 0:_leaderboards$pool$po2.map(function(entry){return{user:entry.username,record:entry.total_wins?\"\".concat(entry.total_wins,\"-\").concat(entry.total_losses):undefined,points:entry.total_points_for?entry.total_points_for.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}):undefined,points_against:entry.total_points_against?entry.total_points_against.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}):undefined,net_points:entry.total_points_for&&entry.total_points_against?(entry.total_points_for-entry.total_points_against).toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}):undefined,player:entry.player_name,position:entry.position,score:entry.score?entry.score.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}):undefined};}))||[],selected:selectedCard===pool.pool_id// onClick={() => handleCardClick(pool.pool_id)}\n});})));}export default Leaderboards;","map":{"version":3,"sources":["/Users/ryan.gillies/Documents/side_judge/src/pages/Leaderboards.js"],"names":["React","useEffect","useState","PageTitle","SectionTitle","LeaderboardCard","selectedSeason","Leaderboards","leagueId","pools","setPools","selectedCard","setSelectedCard","leaderboards","setLeaderboards","loading","setLoading","fetchData","fetch","response","ok","Error","json","data","sort","a","b","label","localeCompare","console","error","filter","pool","pool_subtype","forEach","pool_id","statusText","prevLeaderboards","map","entry","user","username","week","opponent","player","player_name","position","score","toLocaleString","minimumFractionDigits","maximumFractionDigits","undefined","record","total_wins","total_losses","points","total_points_for","points_against","total_points_against","net_points"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PageTitle from '../components/Typography/PageTitle';\nimport SectionTitle from '../components/Typography/SectionTitle';\nimport LeaderboardCard from '../components/Cards/LeaderboardCard';\nimport selectedSeason from './Payouts';\n\nfunction Leaderboards() {\n  const leagueId = '978439391255322624';\n\n  const [pools, setPools] = useState([]);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [leaderboards, setLeaderboards] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('/api/v1/pools');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setPools(data.sort((a, b) => a.label.localeCompare(b.label)));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching pools:', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    pools.filter(pool => pool.pool_subtype === 'season_high'|| pool.pool_subtype === 'season_cumulative').forEach(async (pool) => {\n      try {\n        const response = await fetch(`/api/v1/pools/leaderboard?league_id=${leagueId}&pool_id=${pool.pool_id}`);\n        if (!response.ok) {\n          console.error(`Error fetching leaderboard for pool ${pool.pool_id}: ${response.statusText}`);\n          return; // Continue to next pool if error occurs\n        }\n        const data = await response.json();\n        setLeaderboards(prevLeaderboards => ({ ...prevLeaderboards, [pool.pool_id]: data }));\n      } catch (error) {\n        console.error('Error fetching leaderboards:', error);\n      }\n    });\n  }, [leagueId, pools]);\n\n\n  // const handleCardClick = (id) => {\n  //   setSelectedCard(id === selectedCard ? null : id); // Toggle selection\n  // };\n\n  return (\n    <>\n      <PageTitle>Leaderboards</PageTitle>\n\n      <SectionTitle>Season Highs</SectionTitle>\n\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\">\n\n        {pools\n          .filter(pool => pool.pool_subtype === 'season_high')\n          .map((pool) => (\n            <LeaderboardCard\n              key={pool.pool_id}\n              title={pool.label}\n              lines={leaderboards[pool.pool_id]?.map((entry) => ({\n                user: entry.username,\n                week: entry.week,\n                opponent: entry.opponent,\n                player: entry.player_name,\n                position: entry.position,\n                score: entry.score ? entry.score.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n              })) || []}\n              selected={selectedCard === pool.pool_id}\n              // onClick={() => handleCardClick(pool.pool_id)}\n            />\n          ))}\n      </div>\n\n      <SectionTitle>Season Cumulatives</SectionTitle>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\">\n\n        {pools\n          .filter(pool => pool.pool_subtype === 'season_cumulative')\n          .map((pool) => (\n            <LeaderboardCard\n              key={pool.pool_id}\n              title={pool.label}\n              lines={leaderboards[pool.pool_id]?.map((entry) => ({\n                user: entry.username,\n                record: entry.total_wins ? `${entry.total_wins}-${entry.total_losses}` : undefined,\n                points: entry.total_points_for ? entry.total_points_for.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                points_against: entry.total_points_against ? entry.total_points_against.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                net_points: entry.total_points_for && entry.total_points_against ? (entry.total_points_for - entry.total_points_against).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                player: entry.player_name,\n                position: entry.position,\n                score: entry.score ? entry.score.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n              })) || []}\n\n              selected={selectedCard === pool.pool_id}\n              // onClick={() => handleCardClick(pool.pool_id)}\n            />\n          ))}\n      </div>\n\n    </>\n  );\n}\n\nexport default Leaderboards;\n\n"]},"metadata":{},"sourceType":"module"}