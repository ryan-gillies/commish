{"ast":null,"code":"var _jsxFileName = \"/Users/ryan.gillies/Documents/side_judge/src/pages/Leaderboards.js\";\nimport React, { useEffect, useState } from 'react';\nimport PageTitle from '../components/Typography/PageTitle';\nimport SectionTitle from '../components/Typography/SectionTitle';\nimport LeaderboardCard from '../components/Cards/LeaderboardCard';\nimport selectedSeason from './Payouts';\n\nfunction Leaderboards() {\n  const leagueId = '978439391255322624';\n  const [pools, setPools] = useState([]);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [leaderboards, setLeaderboards] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('/api/v1/pools');\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        setPools(data.sort((a, b) => a.label.localeCompare(b.label)));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching pools:', error);\n      }\n    }\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    pools.filter(pool => pool.pool_subtype === 'season_high' || pool.pool_subtype === 'season_cumulative').forEach(async pool => {\n      try {\n        const response = await fetch(`/api/v1/pools/leaderboard?league_id=${leagueId}&pool_id=${pool.pool_id}`);\n\n        if (!response.ok) {\n          console.error(`Error fetching leaderboard for pool ${pool.pool_id}: ${response.statusText}`);\n          return; // Continue to next pool if error occurs\n        }\n\n        const data = await response.json();\n        setLeaderboards(prevLeaderboards => ({ ...prevLeaderboards,\n          [pool.pool_id]: data\n        }));\n      } catch (error) {\n        console.error('Error fetching leaderboards:', error);\n      }\n    });\n  }, [leagueId, pools]); // const handleCardClick = (id) => {\n  //   setSelectedCard(id === selectedCard ? null : id); // Toggle selection\n  // };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Leaderboards\"), /*#__PURE__*/React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Season Highs\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, pools.filter(pool => pool.pool_subtype === 'season_high').map(pool => {\n    var _leaderboards$pool$po;\n\n    return /*#__PURE__*/React.createElement(LeaderboardCard, {\n      key: pool.pool_id,\n      title: pool.label,\n      lines: ((_leaderboards$pool$po = leaderboards[pool.pool_id]) === null || _leaderboards$pool$po === void 0 ? void 0 : _leaderboards$pool$po.map(entry => ({\n        user: entry.username,\n        week: entry.week,\n        opponent: entry.opponent,\n        player: entry.player_name,\n        position: entry.position,\n        score: entry.score ? entry.score.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }) : undefined\n      }))) || [],\n      selected: selectedCard === pool.pool_id // onClick={() => handleCardClick(pool.pool_id)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Season Cumulatives\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, pools.filter(pool => pool.pool_subtype === 'season_cumulative').map(pool => {\n    var _leaderboards$pool$po2;\n\n    return /*#__PURE__*/React.createElement(LeaderboardCard, {\n      key: pool.pool_id,\n      title: pool.label,\n      lines: ((_leaderboards$pool$po2 = leaderboards[pool.pool_id]) === null || _leaderboards$pool$po2 === void 0 ? void 0 : _leaderboards$pool$po2.map(entry => ({\n        user: entry.username,\n        record: entry.total_wins ? `${entry.total_wins}-${entry.total_losses}` : undefined,\n        points: entry.total_points_for ? entry.total_points_for.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }) : undefined,\n        points_against: entry.total_points_against ? entry.total_points_against.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }) : undefined,\n        net_points: entry.total_points_for && entry.total_points_against ? (entry.total_points_for - entry.total_points_against).toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }) : undefined,\n        player: entry.player_name,\n        position: entry.position,\n        score: entry.score ? entry.score.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        }) : undefined\n      }))) || [],\n      selected: selectedCard === pool.pool_id // onClick={() => handleCardClick(pool.pool_id)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    });\n  })));\n}\n\nexport default Leaderboards;","map":{"version":3,"sources":["/Users/ryan.gillies/Documents/side_judge/src/pages/Leaderboards.js"],"names":["React","useEffect","useState","PageTitle","SectionTitle","LeaderboardCard","selectedSeason","Leaderboards","leagueId","pools","setPools","selectedCard","setSelectedCard","leaderboards","setLeaderboards","loading","setLoading","fetchData","response","fetch","ok","Error","data","json","sort","a","b","label","localeCompare","error","console","filter","pool","pool_subtype","forEach","pool_id","statusText","prevLeaderboards","map","entry","user","username","week","opponent","player","player_name","position","score","toLocaleString","minimumFractionDigits","maximumFractionDigits","undefined","record","total_wins","total_losses","points","total_points_for","points_against","total_points_against","net_points"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PageTitle from '../components/Typography/PageTitle';\nimport SectionTitle from '../components/Typography/SectionTitle';\nimport LeaderboardCard from '../components/Cards/LeaderboardCard';\nimport selectedSeason from './Payouts';\n\nfunction Leaderboards() {\n  const leagueId = '978439391255322624';\n\n  const [pools, setPools] = useState([]);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [leaderboards, setLeaderboards] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('/api/v1/pools');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setPools(data.sort((a, b) => a.label.localeCompare(b.label)));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching pools:', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    pools.filter(pool => pool.pool_subtype === 'season_high'|| pool.pool_subtype === 'season_cumulative').forEach(async (pool) => {\n      try {\n        const response = await fetch(`/api/v1/pools/leaderboard?league_id=${leagueId}&pool_id=${pool.pool_id}`);\n        if (!response.ok) {\n          console.error(`Error fetching leaderboard for pool ${pool.pool_id}: ${response.statusText}`);\n          return; // Continue to next pool if error occurs\n        }\n        const data = await response.json();\n        setLeaderboards(prevLeaderboards => ({ ...prevLeaderboards, [pool.pool_id]: data }));\n      } catch (error) {\n        console.error('Error fetching leaderboards:', error);\n      }\n    });\n  }, [leagueId, pools]);\n\n\n  // const handleCardClick = (id) => {\n  //   setSelectedCard(id === selectedCard ? null : id); // Toggle selection\n  // };\n\n  return (\n    <>\n      <PageTitle>Leaderboards</PageTitle>\n\n      <SectionTitle>Season Highs</SectionTitle>\n\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\">\n\n        {pools\n          .filter(pool => pool.pool_subtype === 'season_high')\n          .map((pool) => (\n            <LeaderboardCard\n              key={pool.pool_id}\n              title={pool.label}\n              lines={leaderboards[pool.pool_id]?.map((entry) => ({\n                user: entry.username,\n                week: entry.week,\n                opponent: entry.opponent,\n                player: entry.player_name,\n                position: entry.position,\n                score: entry.score ? entry.score.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n              })) || []}\n              selected={selectedCard === pool.pool_id}\n              // onClick={() => handleCardClick(pool.pool_id)}\n            />\n          ))}\n      </div>\n\n      <SectionTitle>Season Cumulatives</SectionTitle>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-2\">\n\n        {pools\n          .filter(pool => pool.pool_subtype === 'season_cumulative')\n          .map((pool) => (\n            <LeaderboardCard\n              key={pool.pool_id}\n              title={pool.label}\n              lines={leaderboards[pool.pool_id]?.map((entry) => ({\n                user: entry.username,\n                record: entry.total_wins ? `${entry.total_wins}-${entry.total_losses}` : undefined,\n                points: entry.total_points_for ? entry.total_points_for.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                points_against: entry.total_points_against ? entry.total_points_against.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                net_points: entry.total_points_for && entry.total_points_against ? (entry.total_points_for - entry.total_points_against).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n                player: entry.player_name,\n                position: entry.position,\n                score: entry.score ? entry.score.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : undefined,\n              })) || []}\n\n              selected={selectedCard === pool.pool_id}\n              // onClick={() => handleCardClick(pool.pool_id)}\n            />\n          ))}\n      </div>\n\n    </>\n  );\n}\n\nexport default Leaderboards;\n\n"]},"metadata":{},"sourceType":"module"}