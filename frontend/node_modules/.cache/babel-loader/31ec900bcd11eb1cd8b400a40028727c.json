{"ast":null,"code":"import _slicedToArray from\"/Users/ryan.gillies/Documents/side_judge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useMemo}from'react';// create context\nexport var SidebarContext=React.createContext();export var SidebarProvider=function SidebarProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSidebarOpen=_useState2[0],setIsSidebarOpen=_useState2[1];function toggleSidebar(){setIsSidebarOpen(!isSidebarOpen);}function closeSidebar(){setIsSidebarOpen(false);}var value=useMemo(function(){return{isSidebarOpen:isSidebarOpen,toggleSidebar:toggleSidebar,closeSidebar:closeSidebar};},[isSidebarOpen]);return/*#__PURE__*/React.createElement(SidebarContext.Provider,{value:value},children);};","map":{"version":3,"sources":["/Users/ryan.gillies/Documents/side_judge/src/context/SidebarContext.js"],"names":["React","useState","useMemo","SidebarContext","createContext","SidebarProvider","children","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,OAA1B,KAAyC,OAAzC,CAEA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAGH,KAAK,CAACI,aAAN,EAAvB,CAEP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACLL,QAAQ,CAAC,KAAD,CADH,wCACxCM,aADwC,eACzBC,gBADyB,eAG/C,QAASC,CAAAA,aAAT,EAAyB,CACvBD,gBAAgB,CAAC,CAACD,aAAF,CAAhB,CACD,CAED,QAASG,CAAAA,YAAT,EAAwB,CACtBF,gBAAgB,CAAC,KAAD,CAAhB,CACD,CAED,GAAMG,CAAAA,KAAK,CAAGT,OAAO,CACnB,iBAAO,CACLK,aAAa,CAAbA,aADK,CAELE,aAAa,CAAbA,aAFK,CAGLC,YAAY,CAAZA,YAHK,CAAP,EADmB,CAMnB,CAACH,aAAD,CANmB,CAArB,CASA,mBAAO,oBAAC,cAAD,CAAgB,QAAhB,EAAyB,KAAK,CAAEI,KAAhC,EAAwCL,QAAxC,CAAP,CACD,CArBM","sourcesContent":["import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}